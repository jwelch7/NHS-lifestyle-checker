{"ast":null,"code":"import moment from \"moment\";\nexport const checkNameMatch = (obj, userObj) => {\n  const regex = new RegExp(`\\\\b${userObj.name}\\\\b`, \"i\");\n  const [, lastName] = obj.name.match(/(.*),\\s*(.*)/);\n  return regex.test(lastName);\n};\nexport const checkDetails = (mockDB, userObj) => {\n  //check all users in mockdb to see if any match the userObj exactly\n  const matchingObj = mockDB.find(obj => obj.nhsNumber === parseInt(userObj.nhsNumber) && checkNameMatch(obj, userObj) && obj.born === userObj.born);\n\n  //if all matching but one is under 18 then tell them theyre too young, if not then return success\n  if (matchingObj) {\n    const age = calculateAge(matchingObj.born);\n    if (age < 18) {\n      return \"You are not eligible for this service\";\n    } else {\n      return \"Success\";\n    }\n  } else {\n    return \"Your details could not be found\";\n  }\n};\nexport const calculateAge = birthday => {\n  const dob = moment(birthday, \"DD/MM/YYYY\");\n  const now = moment();\n  return now.diff(dob, \"years\");\n};\n\n// export const calculateAge = (birthday) => {\n//   const dob = new Date(birthday);\n//   const diffMs = Date.now() - dob.getTime();\n//   const ageDt = new Date(diffMs);\n//   return Math.abs(ageDt.getUTCFullYear() - 1970);\n// };\n// export const calculateAge = (birthday) => { - This line declares a named export for a function called calculateAge that takes in a single parameter called birthday.\n\n//     const dob = new Date(birthday); - This line creates a new Date object based on the birthday parameter passed into the function. The Date object represents a specific moment in time, and can be constructed in a variety of ways.\n\n//     const diffMs = Date.now() - dob.getTime(); - This line calculates the difference between the current time (as determined by the Date.now() function) and the time represented by the dob object. The result is a number representing the number of milliseconds between the two times.\n\n//     const ageDt = new Date(diffMs); - This line creates a new Date object representing the same moment in time as the diffMs value calculated in the previous line. This new Date object is created using the milliseconds value, which can be passed to the Date constructor as a number.\n\n//     return Math.abs(ageDt.getUTCFullYear() - 1970); - This line calculates the age of the person represented by the birthday parameter by subtracting the year of the dob object from the year 1970. The getUTCFullYear() method is used to extract the year from the ageDt object, and the Math.abs() function is used to ensure that a positive value is always returned, regardless of whether the person's birthday has already occurred in the current year or not.\n\n//     Overall, this function takes a birthday parameter (in the format of a string representing a date) and returns the age of the person represented by that date in years.","map":{"version":3,"names":["moment","checkNameMatch","obj","userObj","regex","RegExp","name","lastName","match","test","checkDetails","mockDB","matchingObj","find","nhsNumber","parseInt","born","age","calculateAge","birthday","dob","now","diff"],"sources":["/Users/jonno/Projects/lifestyle-checker/src/utils/utils.js"],"sourcesContent":["import moment from \"moment\";\n\nexport const checkNameMatch = (obj, userObj) => {\n  const regex = new RegExp(`\\\\b${userObj.name}\\\\b`, \"i\");\n  const [, lastName] = obj.name.match(/(.*),\\s*(.*)/);\n  return regex.test(lastName);\n};\n\nexport const checkDetails = (mockDB, userObj) => {\n  //check all users in mockdb to see if any match the userObj exactly\n  const matchingObj = mockDB.find(\n    (obj) =>\n      obj.nhsNumber === parseInt(userObj.nhsNumber) &&\n      checkNameMatch(obj, userObj) &&\n      obj.born === userObj.born\n  );\n\n  //if all matching but one is under 18 then tell them theyre too young, if not then return success\n  if (matchingObj) {\n    const age = calculateAge(matchingObj.born);\n    if (age < 18) {\n      return \"You are not eligible for this service\";\n    } else {\n      return \"Success\";\n    }\n  } else {\n    return \"Your details could not be found\";\n  }\n};\n\nexport const calculateAge = (birthday) => {\n  const dob = moment(birthday, \"DD/MM/YYYY\");\n  const now = moment();\n  return now.diff(dob, \"years\");\n};\n\n// export const calculateAge = (birthday) => {\n//   const dob = new Date(birthday);\n//   const diffMs = Date.now() - dob.getTime();\n//   const ageDt = new Date(diffMs);\n//   return Math.abs(ageDt.getUTCFullYear() - 1970);\n// };\n// export const calculateAge = (birthday) => { - This line declares a named export for a function called calculateAge that takes in a single parameter called birthday.\n\n//     const dob = new Date(birthday); - This line creates a new Date object based on the birthday parameter passed into the function. The Date object represents a specific moment in time, and can be constructed in a variety of ways.\n\n//     const diffMs = Date.now() - dob.getTime(); - This line calculates the difference between the current time (as determined by the Date.now() function) and the time represented by the dob object. The result is a number representing the number of milliseconds between the two times.\n\n//     const ageDt = new Date(diffMs); - This line creates a new Date object representing the same moment in time as the diffMs value calculated in the previous line. This new Date object is created using the milliseconds value, which can be passed to the Date constructor as a number.\n\n//     return Math.abs(ageDt.getUTCFullYear() - 1970); - This line calculates the age of the person represented by the birthday parameter by subtracting the year of the dob object from the year 1970. The getUTCFullYear() method is used to extract the year from the ageDt object, and the Math.abs() function is used to ensure that a positive value is always returned, regardless of whether the person's birthday has already occurred in the current year or not.\n\n//     Overall, this function takes a birthday parameter (in the format of a string representing a date) and returns the age of the person represented by that date in years.\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EAC9C,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,MAAKF,OAAO,CAACG,IAAK,KAAI,EAAE,GAAG,CAAC;EACtD,MAAM,GAAGC,QAAQ,CAAC,GAAGL,GAAG,CAACI,IAAI,CAACE,KAAK,CAAC,cAAc,CAAC;EACnD,OAAOJ,KAAK,CAACK,IAAI,CAACF,QAAQ,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGA,CAACC,MAAM,EAAER,OAAO,KAAK;EAC/C;EACA,MAAMS,WAAW,GAAGD,MAAM,CAACE,IAAI,CAC5BX,GAAG,IACFA,GAAG,CAACY,SAAS,KAAKC,QAAQ,CAACZ,OAAO,CAACW,SAAS,CAAC,IAC7Cb,cAAc,CAACC,GAAG,EAAEC,OAAO,CAAC,IAC5BD,GAAG,CAACc,IAAI,KAAKb,OAAO,CAACa,IAAI,CAC5B;;EAED;EACA,IAAIJ,WAAW,EAAE;IACf,MAAMK,GAAG,GAAGC,YAAY,CAACN,WAAW,CAACI,IAAI,CAAC;IAC1C,IAAIC,GAAG,GAAG,EAAE,EAAE;MACZ,OAAO,uCAAuC;IAChD,CAAC,MAAM;MACL,OAAO,SAAS;IAClB;EACF,CAAC,MAAM;IACL,OAAO,iCAAiC;EAC1C;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EACxC,MAAMC,GAAG,GAAGpB,MAAM,CAACmB,QAAQ,EAAE,YAAY,CAAC;EAC1C,MAAME,GAAG,GAAGrB,MAAM,EAAE;EACpB,OAAOqB,GAAG,CAACC,IAAI,CAACF,GAAG,EAAE,OAAO,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}